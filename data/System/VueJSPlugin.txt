%META:TOPICINFO{author="BaseUserMapping_999" comment="" date="1443077395" format="1.1" version="1"}%

---+!! %TOPIC%
<!--
* Set SHORTDESCRIPTION = jQuery <nop>JavaScript library for Foswiki
-->
%SHORTDESCRIPTION%

%TOC%

---++ Description
<blockquote>
Vue.js (pronounced /vjuÀê/, like view) is a library for building interactive web interfaces. The goal of Vue.js is to provide the benefits of reactive data binding and composable view components with an API that is as simple as possible.

Vue.js itself is not a full-blown framework - it is focused on the view layer only. It is therefore very easy to pick up and to integrate with other libraries or existing projects. On the other hand, when used in combination with proper tooling and supporting libraries, Vue.js is also perfectly capable of powering sophisticated Single-Page Applications.
</blockquote>

---++ Vue.js references and tutorials
   * [[https://vuejs.org/][vue.js Hompage]]
   * [[https://vuejs.org/api/][vue.js API]]
   * [[https://github.com/vuejs/vue][vue.js on GitHub]]

---++ How to use
A Vue.js app usually needs some HTML code, some JS and also some CSS code to run. When you call the %<nop>VUE% macro with the app name (%<nop>VUE{"<<nop>APPNAME>"}%) the Plugin tries to load the JS and CSS files for your Application. It looks on the VueJS public folder in the System Web for a JS and CSS file with the app name. Example: Appname: TestAPP -> JS: %PUBURL%/%SYSTEMWEB%/VueJSPlugin/TestApp.js etc...

---++ Loading Vue 2.x + Vuex
By default the VUE macro loads Vue in version 1.x. To load Vue 2.x + Vuex just provide a VERSION parameter and set it to two (%<nop>VUE{VERSION="2"}%).

---++ Vue extensions
<pre>The following only applies when loading Vue 2.x.</pre>
The VueJSPlugin extends the global Vue instance with some additional plugins and functions.

---++ Additional Plugins
---+++ Internationalization - <a href="https://github.com/panter/vue-i18next">vue-i18next</a>
Internationalization for vue using the i18next i18n ecosystem. <a href="http://i18next.com/">i18next.com/</a>
---+++ Global Parameters - <a href="https://github.com/rse/vue-params">vue-params</a>
Vue plugin for global parameters triggering data-binding updates. E.g. used to update $t in vue-i18next.
---+++ Routing - <a href="https://router.vuejs.org/en/">vue-router</a>
Offical router for Vue.js. Helps building Single Page Applications.
---+++ List modifying with drag & drop - <a href="http://hejx.space/vddl">Vddl</a>
Vue plugin adds Components for modifying lists with the HTML5 drag & drop API.
---+++ Validations - <a href="http://vee-validate.logaretm.com/">VeeValidate</a>
The VueJS Plugin is bundled with the Vee-Validate Plugin for Vue which can be used to define input validations.
Search for the official Vee-Validate documentation for further information on how to use it.

*Important*: The Plugin has been reconfigured to change the errors property name from 'errors' to 'validationErrors'
and the fields property name from 'fields' to 'validationFields'.

---++ Additional components
For an overviwe see: [[System.VueJSPluginShowroom]] and for documentation: [[System.VueJSPluginComponents]]
---+++ Vue Sidebar
---+++ Vue Button
---+++ Vue Check Item
---+++ Vue Input Text
---+++ Vue Select
---+++ Vue Tabpane
---+++ Vue Pagination
---+++ Vue Dad (Drag & Drop ) List
---+++ Vue Splitbutton

---++ Additional instance properties
Every Vue component instance has access to some additional properties/methods.

---+++ $foswiki

The global foswiki object.

---+++ $moment

A moment.js instance which can be used to manipulate dates and times.

---+++ $store

The global Vuex store which is the same for all components.

---+++ $lang

Returns the lang attribute set on the html tag.

---+++ $ajax

Equivalent to $.ajax

---+++ $showAlert
A function to display configurable alerts. See the [[System.VueJSPluginShowroom][showroom]] for details.

---++ Global helper functions
Some additional helper functions are accessible via the global Vue object.

---+++ onDocumentReady(fn)

This is equivalent to $(fn).

---+++ registerStoreModule(name, store)

This registers a submodule in the global Vuex store.

---+++ instantiateEach(selector, componentOptions)

This instantiates a new component specified in componentOptions on all elements matched by selector.
Use this only to bootstrap components which have been included via macros.

---+++ getConfigById(id)

This searches for a DOM element which has the css class named id, parses its content as JSON and returns the object.
It should only be used to retrieve config data from macros. The standard procedure looks like this:

   * The macro writes the config as stringified JSON into a script tag and sets a unique id as a css class.
   * The macro passes the id to the vue component tag as a prop.
   * The component gets its config by calling the getConfigById function with the provided id.

---+++ makeAbsoluteUrl(url)

This adds foswikis scripturl part to the url parameter.

---+++ getUniqueId

Returns a unique id to use as identifier. A seven numbers long String.

%META:FORM{name="PackageForm"}%
%META:FIELD{name="Author" title="Author" value="ProjectContributor"}%
%META:FIELD{name="Version" title="Version" value="%25$VERSION%25"}%
%META:FIELD{name="Release" title="Release" value="%25$RELEASE%25"}%
%META:FIELD{name="Repository" title="Repository" value="https://github.com/foswiki/distro"}%
%META:FIELD{name="Copyright" title="Copyright" value="2007-2015 Foswiki Contributors http://foswiki.org"}%
%META:FIELD{name="License" title="License" value="GPL"}%
%META:FIELD{name="Home" title="Home" value="Foswiki:Extensions/%25$ROOTMODULE%25"}%
%META:FIELD{name="Support" title="Support" value="Foswiki:Support/%25$ROOTMODULE%25"}%
